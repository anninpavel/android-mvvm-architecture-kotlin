/*
 * Copyright 2018 Pavel Annin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: "${rootDir}/gradle/git-version.gradle"
apply from: "${rootDir}/gradle/generated-kotlin-sources.gradle"

android {
    def version_major = Integer.parseInt(version_major)
    def version_minor = Integer.parseInt(version_minor)
    def version_patch = Integer.parseInt(version_patch)
    def version_build = Integer.parseInt(version_build)

    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId "com.github.anninpavel.androidarchitecture"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk

        versionCode version_major * 10000 + version_minor * 1000 + version_patch * 100 + version_build
        versionName "${version_major}.${version_minor}.${version_patch}"

        resConfigs "ru"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-${gitRevision}"
            debuggable true
            minifyEnabled false
            shrinkResources false
            testCoverageEnabled true
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries true
        maxProcessCount 2
        javaMaxHeapSize "2g"
        jumboMode = true
    }

    task('increaseVersionBuild') << {
        ant.propertyfile(file: "${rootDir}/gradle.properties") {
            version_build = version_build + 1
            entry(key: "version_build", value: version_build)
        }
    }

    applicationVariants.all { variant ->
        File outDir = file("${rootDir}/out/${variant.buildType.name}")
        File mappingOutDir = file("${outDir}/mapping")
        if (!outDir.exists()) { outDir.mkdirs() }
        if (!mappingOutDir.exists()) { mappingOutDir.mkdirs() }
        variant.assemble.doLast {
            variant.outputs.each { output ->
                copy {
                    from output.outputFile
                    into outDir
                    rename { fileName -> "app_v${variant.versionName}.${variant.versionCode}.apk" }
                }
            }
            if (variant.getBuildType().isMinifyEnabled()) {
                copy {
                    from variant.mappingFile
                    into mappingOutDir
                    rename { fileName -> "mapping_v${variant.versionName}.${variant.versionCode}.txt" }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android Support Library
    implementation deps.support.app_compat
    implementation deps.constraint_layout

    // Kotlin
    implementation deps.kotlin.std_lib

    // Test
    testImplementation deps.junit
    androidTestImplementation deps.support.test_runner
    androidTestImplementation deps.support.espresso_core
}

kapt { generateStubs = true }